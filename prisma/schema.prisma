// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  READER
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  List          List[]
  UserLibrary   UserLibrary[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author      String
  genre       String
  LibraryBook LibraryBook[]
  ListBook    ListBook[]
}

model Library {
  id    Int           @id @default(autoincrement())
  name  String
  books LibraryBook[]
  users UserLibrary[]

  @@index([name])
}

model List {
  id     Int        @id @default(autoincrement())
  name   String
  userId String
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  books  ListBook[]

  @@index([userId])
}

model LibraryBook {
  id        Int     @id @default(autoincrement())
  libraryId Int
  bookId    Int
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade)
  book      Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([libraryId, bookId])
}

model ListBook {
  id     Int  @id @default(autoincrement())
  listId Int
  bookId Int
  list   List @relation(fields: [listId], references: [id], onDelete: Cascade)
  book   Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([listId, bookId])
}

model UserLibrary {
  id        Int      @id @default(autoincrement())
  userId    String
  libraryId Int
  role      UserRole
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade)

  @@unique([userId, libraryId])
}
